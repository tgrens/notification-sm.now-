<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_dtitg_notificati.EventNotificationService</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>EventNotificationService</description>
        <name>EventNotificationService</name>
        <script><![CDATA[/* eslint-disable no-unused-vars */
/* eslint-disable no-undef */
/**
 * @class EventNotificationService
 * @description Generates event based email content.
 * @since 13/06/2024
 * @date  13/06/2024
 * @version 1.0.0
 * @author Thomas Grensemann E-Mail: <thomas.grensemann@t-systems.com>
 *
 */
class EventNotificationService extends ContentService {


    /**
    * Controller for the event notification email generation.
    *
    * var notifParams = {
         'businessService': '',
         'company': '',
         'recipients': [],
         'languageId': '',
         'paramObj': {}
     };
    *
    *
    * @param {Object} notifParams see email.engine.js
    *
    *
    *   {
            "parm1": "recipients",
            "parm2": {
                "subject": "subject",
                "email_header": 'Hello Thomas',
                "email_body": "this is a email",
                "link_url": 'https://www.ecosia.org/',
                "link_name": 'Search'
            }
        }
    *
    */
    process(notifParams) {

        let schemaReader = new OptionSchemaReader();
        let options = schemaReader.readOptions('EventNotificationService', this.sysEventEmailAction);
        let display = options.display || 'true';

        gs.debug(`[EventNotificationService] display ==> ${ display}`);

        if(display === 'true') {

            if(UtilityFunctions.determineEvent(this.event)) {
                let parm2Obj = UtilityFunctions.parse(this.event.parm2);
                gs.debug(`[EventNotificationService] subject ==> ${ JSON.stringify(parm2Obj)}`);

                let subject = UtilityFunctions.findValue(parm2Obj, Constants.SUBJECT);
                let htmlEmail = new HtmlEmailGenerator().writeEmail(parm2Obj);

                gs.debug(`[EventNotificationService] emailBody ==> ${ JSON.stringify(htmlEmail)}`);

                this.email.setSubject(subject);
                this.template.print(htmlEmail);
            }
        }
    }
}
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin_thomas</sys_created_by>
        <sys_created_on>2024-06-12 10:56:09</sys_created_on>
        <sys_id>7f9d09b01dba82505dcf5cb2086a13b2</sys_id>
        <sys_mod_count>24</sys_mod_count>
        <sys_name>EventNotificationService</sys_name>
        <sys_package display_value="Notification SM.now WORK IN PROGRESS" source="x_dtitg_notificati">6fffcd252b9eed90c0fb4cfbad01a0ef</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Notification SM.now WORK IN PROGRESS">6fffcd252b9eed90c0fb4cfbad01a0ef</sys_scope>
        <sys_update_name>sys_script_include_7f9d09b01dba82505dcf5cb2086a13b2</sys_update_name>
        <sys_updated_by>admin_thomas</sys_updated_by>
        <sys_updated_on>2024-06-17 12:13:26</sys_updated_on>
    </sys_script_include>
</record_update>
