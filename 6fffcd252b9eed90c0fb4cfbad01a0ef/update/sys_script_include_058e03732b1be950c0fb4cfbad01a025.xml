<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_dtitg_notificati.HTMLTableService</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description> Controller for the HTML table generation.</description>
        <name>HTMLTableService</name>
        <script><![CDATA[/* eslint-disable camelcase */
/* eslint-disable no-underscore-dangle */
/* eslint-disable no-undef */
/* eslint-disable no-unused-vars */
/**
 * @class HTMLTableService
 * @description Controller for the HTML table generation.
 * @since 09/11/2023
 * @date  09/11/2023
 * @version 1.0.0
 * @author Thomas Grensemann E-Mail: <thomas.grensemann@t-systems.com>
 *
 */

/**
var eventObj = {
    "parm1": recipiens,
    "parm2": {
      "emcos_entries": {
        "name": table1,
        "query": query1,
        "maxRowCount": xx,
        "fieldList": fieldList1
      },
      "incident": {
        "name": table2,
        "query": query2,
        "maxRowCount": xx,
        "fieldList": fieldList2
      }
    }
  };

getService('HTMLTableService', '{ "name": "emcos_entries", "languageId": "en" }');
getService('HTMLTableService', '{ "name": "incident", "languageId": "en" }');

 */

class HTMLTableService extends ContentService {

    /**
   * Controller for the HTML table generation.
   *
   * var notifParams = {
        'businessService': '',
        'company': '',
        'recipients': [],
        'languageId': '',
        'paramObj': {}
    };
   *
   *
   * @param {Object} notifParams see email.engine.js
   */
    process(notifParams) {
        const zeroRow = 0;
        let message = '';

        gs.debug(`[HTMLTableService] notifParams ==> ${ JSON.stringify(notifParams)}`);

        if (this._isEventObject(this.event)) {

            let languageId = this.getLanguageId(notifParams);
            let name = UtilityFunctions.findValue(notifParams, 'name').toString();
            let parm2Obj = UtilityFunctions.parse(this.event.parm2);
            let eventObj = UtilityFunctions.findValue(parm2Obj, name);
            let tableName = UtilityFunctions.findValue(eventObj, 'tableName').toString();
            let maxRowCount = parseInt(UtilityFunctions.findValue(eventObj, 'maxRowCount'), 10);
            let fieldList = UtilityFunctions.findValue(eventObj, 'fieldList').toString().split(',');
            let query = UtilityFunctions.findValue(eventObj, 'query').toString();

            gs.debug(`[Notification][HTMLTableService] languageId ==> ${ languageId}`);
            gs.debug(`[Notification][HTMLTableService] tableName ==> ${ tableName}`);
            gs.debug(`[Notification][HTMLTableService] maxRowCount ==> ${ maxRowCount}`);
            gs.debug(`[Notification][HTMLTableService][process] fieldList ==> ${fieldList}`);
            gs.debug(`[Notification][HTMLTableService][process] query ==> ${ query}`);

            let rowCount = parseInt(x_dtitg_core_smnow.GlideRecordUtils.getRowCount(tableName, query), 10);

            gs.debug(`[Notification][HTMLTableService][process] rowCount ==> ${ rowCount}`);

            if (rowCount === zeroRow) {
                message = this._getMessage(Constants.EMPTY_DATA, notifParams);
                this.template.print(message);
            } else {
                let glRecord = x_dtitg_core_smnow.GlideRecordUtils.getLimitedGlideRecord(tableName, query, maxRowCount);
                let dataGenerator = new HtmlTableDataGenerator();
                let data = dataGenerator.generateTemplateData(glRecord, tableName, fieldList, languageId);

                gs.debug(`[HTMLTableService][process] data => ${ JSON.stringify(data)}`);

                let tableGenerator = new HtmlTableGenerator();
                let htmlTable = tableGenerator.writeTable(data);

                gs.debug(`[HTMLTableService][process] htmlTable => ${ JSON.stringify(htmlTable)}`);

                this.template.print(htmlTable);
            }

            if (rowCount > maxRowCount) {
                message = this._getMessage(Constants.EXCEEDED_DATA, notifParams);
                this.template.print(message);
            }
        }
    }

    /**
     * Checks the object event.
     *
     * @param {Object} event event object
     *
     * @returns {Boolean} true/false
     */
    _isEventObject(event) {
        return !UtilityFunctions.isObjEmpty(event) && UtilityFunctions.isEventParamTwo(event);
    }

    /**
     * Returns the translated message of a label
     *
     * @param {String} key lable key
     * @param {Object} notifParams see email.engine.js
     *
     * @returns {String} translated key
     */
    _getMessage(key, notifParams) {

        gs.debug(`[Notification][HTMLTableService][_getMessage] notifParams ==> ${ JSON.stringify(notifParams)}`);

        let service = new LabelService(this.current, this.template, this.email, this.sysEventEmailAction, this.event);
        let message = service.process(key, notifParams);

        return message;
    }

}
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin_thomas</sys_created_by>
        <sys_created_on>2023-06-15 08:09:15</sys_created_on>
        <sys_id>058e03732b1be950c0fb4cfbad01a025</sys_id>
        <sys_mod_count>97</sys_mod_count>
        <sys_name>HTMLTableService</sys_name>
        <sys_package display_value="Notification SM.now WORK IN PROGRESS" source="x_dtitg_notificati">6fffcd252b9eed90c0fb4cfbad01a0ef</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Notification SM.now WORK IN PROGRESS">6fffcd252b9eed90c0fb4cfbad01a0ef</sys_scope>
        <sys_update_name>sys_script_include_058e03732b1be950c0fb4cfbad01a025</sys_update_name>
        <sys_updated_by>admin_thomas</sys_updated_by>
        <sys_updated_on>2024-06-06 15:26:35</sys_updated_on>
    </sys_script_include>
</record_update>
